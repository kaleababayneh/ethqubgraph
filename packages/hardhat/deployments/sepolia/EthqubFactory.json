{
  "address": "0x99a5B52F6a1da3fdA2fc82869379a81bB104D838",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "EthqubCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_equbTitle",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_poolAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalCycles",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cycleDuration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_startingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_creditScore",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "name": "createEthqub",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ethqubArray",
      "outputs": [
        {
          "internalType": "contract Ethqub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ethqubMapping",
      "outputs": [
        {
          "internalType": "contract Ethqub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "getCycle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployedContracts",
      "outputs": [
        {
          "internalType": "contract Ethqub[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "getEthqubDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_joiner",
          "type": "address"
        }
      ],
      "name": "joinEthqub",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "withdrawEthqub",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb71a8d07dfc4da713f759293118946de046b77f1ea533e8a74ae00699e06dbdb",
  "receipt": {
    "to": null,
    "from": "0x7a30d670ebEb9620E35bC6034AeE69c4Fa5BC50B",
    "contractAddress": "0x99a5B52F6a1da3fdA2fc82869379a81bB104D838",
    "transactionIndex": 115,
    "gasUsed": "2369264",
    "logsBloom": "0x
    "blockHash": "0xfbb74014533544b5be8c2fbe909df8855a63d56ddedc6a533a9a90f48ddd82b3",
    "transactionHash": "0xb71a8d07dfc4da713f759293118946de046b77f1ea533e8a74ae00699e06dbdb",
    "logs": [],
    "blockNumber": 7806115,
    "cumulativeGasUsed": "11092657",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "5c6f620e9b8d52bfcf59ebb1b9e2a8d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"EthqubCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_equbTitle\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCycles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_creditScore\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"name\":\"createEthqub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethqubArray\",\"outputs\":[{\"internalType\":\"contract Ethqub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethqubMapping\",\"outputs\":[{\"internalType\":\"contract Ethqub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployedContracts\",\"outputs\":[{\"internalType\":\"contract Ethqub[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getEthqubDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_joiner\",\"type\":\"address\"}],\"name\":\"joinEthqub\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"withdrawEthqub\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EthqubFactory.sol\":\"EthqubFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/Ethqub.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\ncontract Ethqub {\\n    uint CYCLE_TO_SECONDS = 60 * 60 * 24; \\n\\n    using PriceConverter for uint256;\\n    address public constant ETH_USD_ADDRESS =  0x694AA1769357215DE4FAC081bf1f309aDC325306;\\n    uint256 private constant TOKEN_DECIMALS = 10**18;\\n\\n    uint256 public ethPrice;\\n    AggregatorV3Interface internal priceFeed; \\n\\n    address public immutable creator;\\n    string public equbTitle;\\n    uint256 public immutable creationTime = block.timestamp;\\n    uint256 public startingTime ;\\n    uint256 public cycleStartTime;\\n    uint256 public lastTimeStamp;\\n    \\n    uint256 public poolAmount;\\n    uint256 public individualContribution;\\n\\n    uint256 public currentCycle;\\n    uint256 public totalCycles;\\n    uint256 public cycleDuration;\\n\\n    address[] public members;\\n\\n    address[] public luckyWinners;\\n    address[] public currentMembers; \\n\\n    uint256[] public numberOfCyclesDuePaid;\\n\\n    address public luckyWinner;  \\n    uint256 public randomNumber;\\n    string public ipfsHash;\\n\\n    uint256 public creditScore;\\n    \\n    // events\\n    event MemberJoined(address indexed member, uint256 contribution);\\n    event MemberWithdrawn(address indexed member, uint256 amount);\\n    event MemberPaid(address indexed member, uint256 amount);\\n    event WinnerPicked(address indexed winner);\\n    event EqubEnded(address indexed winner);\\n\\n\\n\\n    modifier isLuckyWinner(address _luckyWinner) {\\n        require(_luckyWinner == luckyWinner, \\\"Not the lucky winner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == creator, \\\"Only the creator can call this function\\\");\\n        _;\\n    }\\n\\n    constructor(    \\n                address _creator,\\n                string memory _equbTitle, \\n                uint256 _poolAmount,  \\n                uint256 _totalCycles, \\n                uint256 _cycleDuration, \\n                string memory _ipfsHash, \\n                uint256 _startingTime, \\n                uint256 _creditScore, \\n                address /*priceFeedAddress*/\\n        ) payable {\\n        creator = _creator;\\n        equbTitle = _equbTitle;\\n        poolAmount = _poolAmount;\\n        individualContribution = _poolAmount / _totalCycles;\\n        totalCycles = _totalCycles;\\n        cycleDuration = _cycleDuration;\\n        startingTime = _startingTime;\\n        cycleStartTime = _startingTime;\\n        currentCycle = 0;\\n        ipfsHash = _ipfsHash;\\n        creditScore = _creditScore;\\n\\n        members.push(_creator);\\n        currentMembers.push(_creator);\\n        numberOfCyclesDuePaid.push(1);\\n    }\\n\\n    function getMemberIndex(address member) public view returns (uint256) {\\n        for (uint i = 0; i < members.length; i++) {\\n            if (members[i] == member) {\\n                return i;\\n            }\\n        }\\n        return 10e18;\\n    }\\n\\n    function getBalance(address _account) public view returns (uint256) {\\n        return _account.balance;\\n    }\\n\\n   \\n    function joinEqub(address _joiner) public payable {\\n        require(members.length < totalCycles, \\\"Equb is full\\\");\\n        require(getBalance(_joiner) >= individualContribution, \\\"Insufficient balance\\\");\\n        require(getMemberIndex(_joiner) == 10e18, \\\"Already a member\\\");\\n\\n        members.push(_joiner);\\n        currentMembers.push(_joiner);\\n        numberOfCyclesDuePaid.push(1);\\n\\n        emit MemberJoined(_joiner, individualContribution);\\n    }\\n\\n    function payEqubDue (address _payer) public payable {\\n\\n        require(getMemberIndex(_payer) < totalCycles, \\\"Not a member\\\");\\n        require(numberOfCyclesDuePaid[getMemberIndex(_payer)] <= currentCycle, \\\"Already paid for this cycle\\\");\\n        require(currentCycle < totalCycles, \\\"Equb has ended\\\");\\n\\n        numberOfCyclesDuePaid[getMemberIndex(_payer)] += 1;\\n        emit MemberPaid(_payer, individualContribution);\\n    }\\n\\n\\n    function getRandomNumber() public view returns (uint256) {\\n        require(block.timestamp >= startingTime + currentCycle * cycleDuration * CYCLE_TO_SECONDS, \\\"Cycle not ended yet\\\");\\n        return  uint256(keccak256(abi.encodePacked(\\n            blockhash(block.number - 1),\\n            block.timestamp,\\n            msg.sender,\\n            currentCycle,\\n            gasleft()\\n        )))  % currentMembers.length;\\n    }\\n\\n\\n    function withdrawEqub() public {\\n       require(block.timestamp >= startingTime + currentCycle * cycleDuration * CYCLE_TO_SECONDS, \\\"Cycle not ended yet\\\");\\n       uint256 balance = address(this).balance;\\n       uint256 withdrawableAmount = individualContribution * members.length;\\n\\n        if (balance > withdrawableAmount) {\\n            balance = withdrawableAmount;\\n        }\\n\\n        address winner = pickLuckyWinner();\\n        luckyWinners.push(winner);\\n        luckyWinner = address(0);\\n\\n        (bool success, ) = payable(winner).call{value: balance, gas: 30000}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n\\n        emit MemberWithdrawn(winner, balance);\\n        currentCycle++;\\n        cycleStartTime = startingTime + currentCycle * cycleDuration * CYCLE_TO_SECONDS;\\n\\n        if (currentCycle == totalCycles) {\\n            emit EqubEnded(winner);\\n        }\\n    }\\n\\n\\n    function pickLuckyWinner() public  returns (address) {\\n       require(block.timestamp >= startingTime + currentCycle * cycleDuration * CYCLE_TO_SECONDS, \\\"Cycle not ended yet\\\");\\n       uint256 indexOfWinner = getRandomNumber();\\n\\n       luckyWinner = currentMembers[indexOfWinner];\\n       lastTimeStamp = block.timestamp;\\n\\n        if (currentMembers.length > 1) {\\n            currentMembers[indexOfWinner] = currentMembers[currentMembers.length - 1];\\n        }\\n    \\n        currentMembers.pop();\\n\\n        emit WinnerPicked(luckyWinner);\\n        return luckyWinner;\\n    }\\n\\n    function equbDetails() public view returns (string memory, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, string memory, address, address[] memory, address[] memory, address[] memory, uint256[] memory, uint256) {\\n        return (\\n            equbTitle, \\n            creationTime, \\n            startingTime, \\n            cycleStartTime, \\n            lastTimeStamp, \\n            poolAmount, \\n            individualContribution, \\n            currentCycle, \\n            totalCycles, \\n            cycleDuration, \\n            members.length, \\n            ipfsHash,\\n            creator,\\n            currentMembers,\\n            members,\\n            luckyWinners,\\n            numberOfCyclesDuePaid,\\n            creditScore\\n        );\\n    }\\n\\n    function isMember(address userAddress) public view returns (bool) {\\n        for (uint i = 0; i < members.length; i++) {\\n            if (members[i] == userAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getCycle() public view returns (uint256) {\\n        require(block.timestamp >= startingTime + currentCycle * cycleDuration, \\\"Cycle not ended yet\\\");\\n        return currentCycle;\\n    }\\n\\n    function seePrice() public  returns (uint256) {\\n        ethPrice = PriceConverter.getPrice(priceFeed);\\n        return ethPrice;\\n    }\\n\\n    /**\\n     * Function that allows the contract to receive ETH\\n     */\\n    receive() external payable {}\\n    \\n}\\n\",\"keccak256\":\"0x9218ff96cea81805f118de0de51f449d92c8a0f6f5327e2b54dbc81c8737034c\",\"license\":\"MIT\"},\"contracts/EthqubFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./Ethqub.sol\\\";\\n\\ncontract EthqubFactory {\\n\\n    Ethqub[] public ethqubArray;\\n    mapping(address => Ethqub) public ethqubMapping;\\n\\n    event EthqubCreated(address indexed contractAddress, address indexed creator);\\n\\n    function createEthqub(\\n        address _creator, \\n        string memory _equbTitle, \\n        uint256 _poolAmount, \\n        uint256 _totalCycles, \\n        uint256 _cycleDuration,\\n        string memory _ipfsHash, \\n        uint256 _startingTime, \\n        uint256 _creditScore, \\n        address priceFeedAddress\\n    ) public payable returns (address) {\\n        Ethqub ethqub = new Ethqub{value: msg.value}(_creator, _equbTitle, _poolAmount, _totalCycles, _cycleDuration, _ipfsHash, _startingTime, _creditScore, priceFeedAddress);\\n        ethqubArray.push(ethqub);\\n        ethqubMapping[address(ethqub)] = ethqub;\\n        emit EthqubCreated(address(ethqub), _creator);\\n        return address(ethqub);\\n    }\\n\\n    function getEthqubDetails(address contractAddress) public view returns (\\n        string memory, \\n        uint256, \\n        uint256, \\n        uint256, \\n        uint256, \\n        uint256, \\n        uint256, \\n        uint256, \\n        uint256, \\n        uint256, \\n        uint256,\\n        string memory,\\n        address,\\n        address[] memory,\\n        address[] memory,\\n        address[] memory,\\n        uint256[] memory,\\n        uint256\\n    ) {\\n        require(address(ethqubMapping[contractAddress]) != address(0), \\\"Contract does not exist\\\");\\n        \\n        Ethqub ethqubInstance = Ethqub(payable(contractAddress)); \\n        return ethqubInstance.equbDetails();\\n    }\\n    \\n    function getDeployedContracts() public view returns (Ethqub[] memory) {\\n        return ethqubArray;\\n    }\\n\\n    function joinEthqub(address contractAddress, address _joiner) public payable {\\n        require(address(ethqubMapping[contractAddress]) != address(0), \\\"Contract does not exist\\\");\\n        Ethqub ethqubInstance = Ethqub(payable(contractAddress)); \\n        ethqubInstance.joinEqub{value: msg.value}(_joiner);\\n    }\\n\\n    function withdrawEthqub(address contractAddress) public payable {\\n        require(address(ethqubMapping[contractAddress]) != address(0), \\\"Contract does not exist\\\");\\n        Ethqub ethqubInstance = Ethqub(payable(contractAddress)); \\n        ethqubInstance.withdrawEqub();\\n    }\\n\\n    function getCycle(address contractAddress) public view returns (uint256) {\\n        require(address(ethqubMapping[contractAddress]) != address(0), \\\"Contract does not exist on this network\\\");\\n        Ethqub ethqubInstance = Ethqub(payable(contractAddress)); \\n        return ethqubInstance.getCycle();\\n    }\\n}\",\"keccak256\":\"0x4471f46ccb6929e60e9f96369971f0c4abe72729f21ad36460f59bf19a4ed1d8\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n\\n    uint256 public constant TOKEN_DECIMALS = 10**18;\\n    \\n\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n       (,int256 price,,,) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    } \\n\\n    function getConversioRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethAmount * ethPrice)/TOKEN_DECIMALS;\\n        return ethAmountInUsd;  \\n    }\\n}\",\"keccak256\":\"0x630e3fe80e25b38c9ce51430129b931a958af585a7bf26ff57bf3c677195cc48\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576129f6908161001c8239f35b600080fdfe6102a06040526004803610156200001557600080fd5b60008061020052803560e01c806316dc68ee14620009f7578063333f5bd114620009b45780636626826a146200092c578063a5131b4f1462000831578063aa9a068f1462000759578063af634c1914620006af578063b5b0e80b14620002685763bb762ad1146200008557600080fd5b610120908160031936011262000261576200009f62000a8d565b67ffffffffffffffff6024358181116200026157620000c2903690870162000b9f565b60a4358281116200026157620000dc903690880162000b9f565b6001600160a01b0394610104358681169391908490036200025e575060405194611c9c808701958611878710176200024557926200013b610100938962000162948a99989762000d258b39169a8b885280602089015287019062000ace565b9060443560408701526064356060870152608435608087015285820360a087015262000ace565b9260c43560c082015260e43560e08201520152039034f0801562000237576102005193845494680100000000000000008610156200021f57505081620001b385600160209701610200515562000a42565b939092169282549060031b9184831b921b191617905580610200515260018352610200519160408320826bffffffffffffffffffffffff60a01b825416179055817ffbb20e1d7e6324290fb1e279ba173c2aed27229abdb8292ba483c04067bbd77d6040519480a38152f35b634e487b7160e01b9052604190525061020051602490fd5b6040513d61020051823e3d90fd5b60418a634e487b7160e01b610200515252602461020051fd5b80fd5b6102005180fd5b82346200026157602036600319011262000261576001600160a01b036200028e62000a8d565b168061020051526001602052620002b660018060a01b03604061020051205416151562000bec565b60405180926315b6b63760e21b82528161020051935afa80608052156200023757610200519081806101e05280808182838490859286948796889989809c816102405281610140528160e0526080516200044c575b5093620003a69793620003f29e9793620003dc9e9d9b979362000347620003c99e9c986102406040518060c0525261024060c051019062000ace565b99602060c05101526101e051604060c0510152606060c0510152608060c051015260a060c051015260c08051015260e060c051015261010060c051015261012060c051015261014060c051015260c05161016081840391015262000ace565b9160018060a01b031661018060c051015260c0516101a081840391015262000af5565b9060c0516101c081840391015262000af5565b60c0516101e08183039101526102405162000af5565b60c051610200818303910152602061014051519182815201906020610140510190610200515b81811062000435578360e05161022060c051015260c05180910390f35b825184526020938401939092019160010162000418565b9c509c5050505050505050505050503d8092823e6200046c828262000b5f565b6102408183810103126200026157805167ffffffffffffffff811162000261576200049d9083830190830162000c39565b610180526020810151916040820151606083015161010052608083015160a08401519260c08501519560e086015190610100870151946101208801516101408901516101608a015167ffffffffffffffff811162000261576200050690878c01908c0162000c39565b90620005166101808c0162000c86565b926101a08c015167ffffffffffffffff811162000261578c6200053e918a8201910162000cb4565b976101c08d015167ffffffffffffffff811162000261578d6200056691838201910162000cb4565b610120526101e08d015167ffffffffffffffff811162000261578d6200059191838201910162000cb4565b6101a0526102008d0151806102205267ffffffffffffffff81116200026157818e01818f01601f01121562000261578d015161028052620005eb620005d96102805162000c9b565b8060a052604051806101c05262000b5f565b6101c0516102605261028051610260515260206101c0510161026052610220518d01908d0160206102805160051b8301011162000261576020015b60208d6102805160051b90610220510101018110156200065b5780602091516102605152816102605101610260520162000626565b50610220909b0151610160819052610180516101e09590955261010051610120516101a051610240526101c0516101405260e092909252959c909b939a979992989197939692959294909392908e6200030b565b5060403660031901126200026157620006c762000a8d565b6001600160a01b03916024358381169291908390036200025e575082620007069116928361020051526001602052604061020051205416151562000bec565b813b15620002615760405192636a49cc5760e11b845283015281602481610200519334905af18015620002375762000740575b6102005180f35b6200074b9062000b34565b610200518015620007395780fd5b34620002615761020051806003193601126200025e5760405190819054808352602080930180916102005180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390610200515b8682821062000813578686620007c68288038362000b5f565b6040519283928184019082855251809152604084019291610200515b828110620007f257505050500390f35b83516001600160a01b031685528695509381019392810192600101620007e2565b83546001600160a01b031685529093019260019283019201620007ad565b823462000261576020908160031936011262000261576001600160a01b03806200085a62000a8d565b16908161020051526001845260406102005120541615620008d9578290604051928380926332ade71160e11b82525afa90811562000237576102005191620008a6575b50604051908152f35b90508181813d8311620008d1575b620008c0818362000b5f565b81010312620002615751826200089d565b503d620008b4565b506084916040519162461bcd60e51b8352820152602760248201527f436f6e747261637420646f6573206e6f74206578697374206f6e2074686973206044820152666e6574776f726b60c81b6064820152fd5b82602036600319011262000261576001600160a01b036200096f816200095162000a8d565b16918261020051526001602052604061020051205416151562000bec565b803b156200026157604051809263148c0c7560e01b8252816102005180945af180156200023757620009a2576102005180f35b620009ad9062000b34565b8062000739565b3462000261576020366003190112620002615760206001600160a01b0380620009dc62000a8d565b16610200515260018252604061020051205416604051908152f35b50903462000a3e57602036600319011262000a3e57359080548210156200025e57602062000a258362000a42565b905460405160039290921b1c6001600160a01b03168152f35b5080fd5b90600091825481101562000a79578280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563019190565b634e487b7160e01b83526032600452602483fd5b600435906001600160a01b038216820362000aa457565b600080fd5b60005b83811062000abd5750506000910152565b818101518382015260200162000aac565b9060209162000ae98151809281855285808601910162000aa9565b601f01601f1916010190565b90815180825260208080930193019160005b82811062000b16575050505090565b83516001600160a01b03168552938101939281019260010162000b07565b67ffffffffffffffff811162000b4957604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111762000b4957604052565b67ffffffffffffffff811162000b4957601f01601f191660200190565b81601f8201121562000aa45780359062000bb98262000b82565b9262000bc9604051948562000b5f565b8284526020838301011162000aa457816000926020809301838601378301015290565b1562000bf457565b60405162461bcd60e51b815260206004820152601760248201527f436f6e747261637420646f6573206e6f742065786973740000000000000000006044820152606490fd5b81601f8201121562000aa457805162000c528162000b82565b9262000c62604051948562000b5f565b8184526020828401011162000aa45762000c83916020808501910162000aa9565b90565b51906001600160a01b038216820362000aa457565b67ffffffffffffffff811162000b495760051b60200190565b81601f8201121562000aa45780519162000cce8362000c9b565b9262000cde604051948562000b5f565b808452602092838086019260051b82010192831162000aa4578301905b82821062000d0a575050505090565b83809162000d188462000c86565b81520191019062000cfb56fe60c060405262001c9c803803806200001781620005cb565b92833981019061012081830312620005c6576200003481620005f1565b60208201519091906001600160401b038111620005c657836200005991830162000606565b90604081015193606082015160808301519160a08401519060018060401b038211620005c6576200008c91850162000606565b9560c084015194620000a761010060e08701519601620005f1565b50620151806000554260a05260808790528051906001600160401b038211620005b05760035490600182811c92168015620005a5575b60208310146200058f5781601f8493116200051a575b50602090601f83116001146200048b576000926200047f575b50508160011b916000199060031b1c1916176003555b8060075581156200046957819004600855600a55600b556004828155600592909255600060095583516001600160401b0381116200035157601254600181811c911680156200045e575b60208210146200044957601f8111620003df575b50602094601f8211600114620003725794819293949560009262000366575b50508160011b916000199060031b1c1916176012555b601355600c549168010000000000000000928381101562000351576001810180600c558110156200033c57600c6000527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b03929092166001600160a01b03199283168117909155600e548481101562000327576001810180600e558110156200031257600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018054909216179055600f5491821015620002fd576001820180600f55821015620002e857600f60005260017f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8028301556040516116239081620006798239608051818181610b200152610f80015260a0518181816103c20152610a9a0152f35b603290634e487b7160e01b6000525260246000fd5b604190634e487b7160e01b6000525260246000fd5b603284634e487b7160e01b6000525260246000fd5b604184634e487b7160e01b6000525260246000fd5b603283634e487b7160e01b6000525260246000fd5b604183634e487b7160e01b6000525260246000fd5b0151905038806200019f565b601f19821695601260005260206000209160005b888110620003c657508360019596979810620003ac575b505050811b01601255620001b5565b015160001960f88460031b161c191690553880806200039d565b9192602060018192868501518155019401920162000386565b60126000527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444601f830160051c810191602084106200043e575b601f0160051c01905b81811062000431575062000180565b6000815560010162000422565b909150819062000419565b602284634e487b7160e01b6000525260246000fd5b90607f16906200016c565b634e487b7160e01b600052601260045260246000fd5b0151905038806200010c565b6003600090815293507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b91905b601f1984168510620004fe576001945083601f19811610620004e4575b505050811b0160035562000122565b015160001960f88460031b161c19169055388080620004d5565b81810151835560209485019460019093019290910190620004b8565b60036000529091507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f840160051c8101916020851062000584575b90601f859493920160051c01905b818110620005745750620000f3565b6000815584935060010162000565565b909150819062000557565b634e487b7160e01b600052602260045260246000fd5b91607f1691620000dd565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620005b057604052565b51906001600160a01b0382168203620005c657565b919080601f84011215620005c65782516001600160401b038111620005b0576020906200063c601f8201601f19168301620005cb565b92818452828287010111620005c65760005b8181106200066457508260009394955001015290565b85810183015184820184015282016200064e56fe61016080604052600480361015610020575b5050361561001e57600080fd5b005b60003560e01c91826302d05d3f14610f6d57508163148c0c7514610d695781632a289e6714610d3c5781632fcc345b14610d20578163335e536c14610d0257816339518b5e14610ce557816339da315214610cc75781633f3b3b2714610ca9578163446ad54914610c8257816348d555eb14610c645781634a76d31214610c2f57816356dad8dc146108ba578163570f88131461088b5781635bec4cb41461086d5781635daf08ca1461082d578163655bce22146107f4578163a1657681146107d6578163a230c5241461079f578163a693600b14610781578163bab2f55214610763578163bf85ef321461069c578163c252259814610643578163c5a0a74d14610616578163c623674f146105e2578163ccbac9f5146105c4578163d49398ae146103e5578163d8270dce146103aa578163dbdff2c114610387578163eb33309614610209578163f8b2cb4f146101db57508063fcf488a9146101b25763ff186b2e1461018f573880610011565b346101ad5760003660031901126101ad576020600154604051908152f35b600080fd5b346101ad5760003660031901126101ad576010546040516001600160a01b039091168152602090f35b346101ad5760203660031901126101ad57356001600160a01b03811681036101ad5760209031604051908152f35b60203660031901126101ad5780356001600160a01b03811691908281036101ad57610233816112e3565b600a54809110156103545761024f61024a836112e3565b611213565b90546009549160031b1c81106103105710156102db5761024a610271916112e3565b819291549060031b9181831c90600182018092116102c65750821b91600019901b19161790557f2042b7712cb5296596d92ab14e92638ac307b3b6300fa48c5ccd37ad6adbbeb16020600854604051908152a2005b601190634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152602081840152600e60248201526d115c5d58881a185cc8195b99195960921b6044820152606490fd5b60405162461bcd60e51b8152602081860152601b60248201527f416c7265616479207061696420666f722074686973206379636c6500000000006044820152606490fd5b60405162461bcd60e51b8152602081850152600c60248201526b2737ba10309036b2b6b132b960a11b6044820152606490fd5b346101ad5760003660031901126101ad5760206103a261139b565b604051908152f35b346101ad5760003660031901126101ad5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b60203660031901126101ad5780356001600160a01b038116918282036101ad57600c5491600a548310156105915780316008541161055657678ac7230489e8000061042f826112e3565b0361051f57600160401b928381101561050a57816104568260016104759401600c5561124a565b90919082549060031b9160018060a01b03809116831b921b1916179055565b600e548381101561050a57906104568260016104949401600e556111c6565b600f54918210156104f557508060016104b09201600f55611213565b81549060031b906001821b91600019901b19161790557f7f3b9effe05cfb4f31f854004de03199fd03fe56bf38a48b2aa9a9f4402d6e236020600854604051908152a2005b604190634e487b7160e01b6000525260246000fd5b604183634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152602081840152601060248201526f20b63932b0b23c90309036b2b6b132b960811b6044820152606490fd5b60405162461bcd60e51b81526020818401526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b60405162461bcd60e51b8152602081840152600c60248201526b115c5d58881a5cc8199d5b1b60a21b6044820152606490fd5b346101ad5760003660031901126101ad576020601154604051908152f35b346101ad5760003660031901126101ad576106126105fe6110d2565b604051918291602083526020830190611186565b0390f35b346101ad5760203660031901126101ad57356001600160a01b03811681036101ad576103a26020916112e3565b346101ad5760203660031901126101ad5735600d548110156101ad57600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501546040516001600160a01b039091168152602090f35b346101ad5760003660031901126101ad57600254604051633fabe5a360e21b8152919060a0908390839082906001600160a01b03165afa91821561075757600092610709575b506402540be400918281029281840514901517156102c65760208280600155604051908152f35b90915060a0813d821161074f575b8161072460a09383610faf565b810103126101ad57610735816115d6565b506107476080602083015192016115d6565b5090826106e2565b3d9150610717565b6040513d6000823e3d90fd5b346101ad5760003660031901126101ad576020600954604051908152f35b346101ad5760003660031901126101ad576020600754604051908152f35b346101ad5760203660031901126101ad57356001600160a01b03811681036101ad576107cc602091611585565b6040519015158152f35b346101ad5760003660031901126101ad576020600a54604051908152f35b346101ad5760003660031901126101ad57602090546103a26108256009549261081f600b5485611346565b90611339565b421015611359565b346101ad5760203660031901126101ad5735600c548110156101ad5761085460209161124a565b905460405160039290921b1c6001600160a01b03168152f35b346101ad5760003660031901126101ad576020600b54604051908152f35b346101ad5760003660031901126101ad57602060405173694aa1769357215de4fac081bf1f309adc3253068152f35b346101ad5760003660031901126101ad57546005546101205260065460075460085490600954600a54600b5495600c5496601354610100526108fa610fe7565b976109036110d2565b9160405194856020600e54918281520190600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd9060005b818110610c105750505086610954910387610faf565b6040519660208885815201600c6000527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c760005b868110610bf15750508861099d910389610faf565b60405180610140526020600d54918281520190600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb59060005b818110610bd2575050506109f5906101405180910390610faf565b60206040518060c052600f548060a052815201998a60e052600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8029960009b5b60a0518d1015610a58576001602081928e548152019c019c019b9a610a38565b610b16999a9c50610b599b509c610a97610b809f610b6b9f610a809060c05180910390610faf565b604051806080526102408091526080510190611186565b987f00000000000000000000000000000000000000000000000000000000000000006020608051015260406080510152610120516060608051015260808051015260a0608051015260c0608051015260e06080510152610100608051015261012060805101526101406080510152608051610160818403910152611186565b9060018060a01b037f00000000000000000000000000000000000000000000000000000000000000001661018060805101526080516101a0818403910152611281565b906080516101c0818403910152611281565b6080516101e081830391015261014051611281565b608051610200818303910152602060c0515191828152019060e0519060005b818110610bbc578361010051610220608051015260805180910390f35b8251845260209384019390920191600101610b9f565b82546001600160a01b03168452602090930192600192830192016109da565b81546001600160a01b0316835260209092019160019182019101610988565b82546001600160a01b031684526020909301926001928301920161093e565b346101ad5760203660031901126101ad5735600f548110156101ad57610c56602091611213565b90546040519160031b1c8152f35b346101ad5760003660031901126101ad576020600854604051908152f35b346101ad5760203660031901126101ad5735600e548110156101ad576108546020916111c6565b346101ad5760003660031901126101ad576020600654604051908152f35b346101ad5760003660031901126101ad576020601354604051908152f35b346101ad5760003660031901126101ad5760209054604051908152f35b346101ad5760003660031901126101ad576020600554604051908152f35b346101ad5760003660031901126101ad576106126105fe610fe7565b346101ad5760003660031901126101ad576020610d57611461565b6040516001600160a01b039091168152f35b346101ad5760003660031901126101ad57610d9d610825825461081f610d94600954600b5490611346565b60005490611346565b4790610dae600854600c5490611346565b808311610f65575b50610dbf611461565b91600d54600160401b81101561050a576001810180600d55811015610f5057600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5019260018060a01b0316926bffffffffffffffffffffffff60a01b9084828254161790556010541660105560008080808487617530f13d15610f4b573d67ffffffffffffffff8111610f365760405190610e68601f8201601f191660200183610faf565b8152600060203d92013e5b15610efb577f9206244e7d07ef9a49c1dae86e820d494f0dd268fa04f434eb1de8475a4bb55460208492604051908152a2610ec7610eb26009546112be565b91826009555461081f610d94600b5485611346565b600555600a5414610ed457005b7fd29e8545d33d16738453f73ba7267664418170c341c7ab7e3eb60e1fa27dd18e600080a2005b60405162461bcd60e51b815260208184015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606490fd5b604184634e487b7160e01b6000525260246000fd5b610e73565b603283634e487b7160e01b6000525260246000fd5b915082610db6565b346101ad5760003660031901126101ad577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff821117610fd157604052565b634e487b7160e01b600052604160045260246000fd5b60405190600060035490600182811c908084169384156110c8575b60209485841081146110b457838852879493929181156110945750600114611035575b505061103392500383610faf565b565b9093915060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b936000915b81831061107c57505061103393508201013880611025565b85548884018501529485019487945091830191611064565b91505061103394925060ff191682840152151560051b8201013880611025565b634e487b7160e01b85526022600452602485fd5b91607f1691611002565b60405190600060125490600182811c9080841693841561117c575b60209485841081146110b45783885287949392918115611094575060011461111d57505061103392500383610faf565b9093915060126000527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444936000915b81831061116457505061103393508201013880611025565b8554888401850152948501948794509183019161114c565b91607f16916110ed565b919082519283825260005b8481106111b2575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611191565b600e548110156111fd57600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0190600090565b634e487b7160e01b600052603260045260246000fd5b600f548110156111fd57600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020190600090565b600c548110156111fd57600c6000527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70190600090565b90815180825260208080930193019160005b8281106112a1575050505090565b83516001600160a01b031685529381019392810192600101611293565b60001981146112cd5760010190565b634e487b7160e01b600052601160045260246000fd5b600c549060005b82811061130057505050678ac7230489e8000090565b6113098161124a565b905460039190911b1c6001600160a01b03908116908316146113335761132e906112be565b6112ea565b91505090565b919082018092116112cd57565b818102929181159184041417156112cd57565b1561136057565b60405162461bcd60e51b815260206004820152601360248201527210de58db19481b9bdd08195b991959081e595d606a1b6044820152606490fd5b6004546009546113c26108256113b3600b5484611346565b9361081f600095865490611346565b60001943019043821161144d575a6040519160208301934084524260408401523360601b6060840152607483015260948201526094815260c0810181811067ffffffffffffffff82111761143957604052519020600e5491821561142557500690565b634e487b7160e01b81526012600452602490fd5b634e487b7160e01b84526041600452602484fd5b634e487b7160e01b83526011600452602483fd5b600454611488610825611479600954600b5490611346565b9261081f600094855490611346565b61149061139b565b611499816111c6565b919060018060a01b03928391549060031b1c166bffffffffffffffffffffffff60a01b601054161760105542600655600e546001811161153f575b5050600e54801561152b577f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df92919060001901611510816111c6565b8382549160031b1b19169055600e556010541691818392a290565b634e487b7160e01b83526031600452602483fd5b600019810190811161157157906104568361155c61156a946111c6565b90549060031b1c16916111c6565b38806114d4565b634e487b7160e01b84526011600452602484fd5b600c549060005b82811061159b57505050600090565b6115a48161124a565b905460039190911b1c6001600160a01b03908116908316146115ce576115c9906112be565b61158c565b505050600190565b519069ffffffffffffffffffff821682036101ad5756fea2646970667358221220b9dc626d92c3968899c1aba634095b5d5ae4bd671e54b97e0f46631449955d8d64736f6c63430008140033a2646970667358221220fba226bc3c1dc47df321f81ba5d990a77d0b380fa4a79502e9506eb3f45ff34c64736f6c63430008140033",
  "deployedBytecode": "0x6102a06040526004803610156200001557600080fd5b60008061020052803560e01c806316dc68ee14620009f7578063333f5bd114620009b45780636626826a146200092c578063a5131b4f1462000831578063aa9a068f1462000759578063af634c1914620006af578063b5b0e80b14620002685763bb762ad1146200008557600080fd5b610120908160031936011262000261576200009f62000a8d565b67ffffffffffffffff6024358181116200026157620000c2903690870162000b9f565b60a4358281116200026157620000dc903690880162000b9f565b6001600160a01b0394610104358681169391908490036200025e575060405194611c9c808701958611878710176200024557926200013b610100938962000162948a99989762000d258b39169a8b885280602089015287019062000ace565b9060443560408701526064356060870152608435608087015285820360a087015262000ace565b9260c43560c082015260e43560e08201520152039034f0801562000237576102005193845494680100000000000000008610156200021f57505081620001b385600160209701610200515562000a42565b939092169282549060031b9184831b921b191617905580610200515260018352610200519160408320826bffffffffffffffffffffffff60a01b825416179055817ffbb20e1d7e6324290fb1e279ba173c2aed27229abdb8292ba483c04067bbd77d6040519480a38152f35b634e487b7160e01b9052604190525061020051602490fd5b6040513d61020051823e3d90fd5b60418a634e487b7160e01b610200515252602461020051fd5b80fd5b6102005180fd5b82346200026157602036600319011262000261576001600160a01b036200028e62000a8d565b168061020051526001602052620002b660018060a01b03604061020051205416151562000bec565b60405180926315b6b63760e21b82528161020051935afa80608052156200023757610200519081806101e05280808182838490859286948796889989809c816102405281610140528160e0526080516200044c575b5093620003a69793620003f29e9793620003dc9e9d9b979362000347620003c99e9c986102406040518060c0525261024060c051019062000ace565b99602060c05101526101e051604060c0510152606060c0510152608060c051015260a060c051015260c08051015260e060c051015261010060c051015261012060c051015261014060c051015260c05161016081840391015262000ace565b9160018060a01b031661018060c051015260c0516101a081840391015262000af5565b9060c0516101c081840391015262000af5565b60c0516101e08183039101526102405162000af5565b60c051610200818303910152602061014051519182815201906020610140510190610200515b81811062000435578360e05161022060c051015260c05180910390f35b825184526020938401939092019160010162000418565b9c509c5050505050505050505050503d8092823e6200046c828262000b5f565b6102408183810103126200026157805167ffffffffffffffff811162000261576200049d9083830190830162000c39565b610180526020810151916040820151606083015161010052608083015160a08401519260c08501519560e086015190610100870151946101208801516101408901516101608a015167ffffffffffffffff811162000261576200050690878c01908c0162000c39565b90620005166101808c0162000c86565b926101a08c015167ffffffffffffffff811162000261578c6200053e918a8201910162000cb4565b976101c08d015167ffffffffffffffff811162000261578d6200056691838201910162000cb4565b610120526101e08d015167ffffffffffffffff811162000261578d6200059191838201910162000cb4565b6101a0526102008d0151806102205267ffffffffffffffff81116200026157818e01818f01601f01121562000261578d015161028052620005eb620005d96102805162000c9b565b8060a052604051806101c05262000b5f565b6101c0516102605261028051610260515260206101c0510161026052610220518d01908d0160206102805160051b8301011162000261576020015b60208d6102805160051b90610220510101018110156200065b5780602091516102605152816102605101610260520162000626565b50610220909b0151610160819052610180516101e09590955261010051610120516101a051610240526101c0516101405260e092909252959c909b939a979992989197939692959294909392908e6200030b565b5060403660031901126200026157620006c762000a8d565b6001600160a01b03916024358381169291908390036200025e575082620007069116928361020051526001602052604061020051205416151562000bec565b813b15620002615760405192636a49cc5760e11b845283015281602481610200519334905af18015620002375762000740575b6102005180f35b6200074b9062000b34565b610200518015620007395780fd5b34620002615761020051806003193601126200025e5760405190819054808352602080930180916102005180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390610200515b8682821062000813578686620007c68288038362000b5f565b6040519283928184019082855251809152604084019291610200515b828110620007f257505050500390f35b83516001600160a01b031685528695509381019392810192600101620007e2565b83546001600160a01b031685529093019260019283019201620007ad565b823462000261576020908160031936011262000261576001600160a01b03806200085a62000a8d565b16908161020051526001845260406102005120541615620008d9578290604051928380926332ade71160e11b82525afa90811562000237576102005191620008a6575b50604051908152f35b90508181813d8311620008d1575b620008c0818362000b5f565b81010312620002615751826200089d565b503d620008b4565b506084916040519162461bcd60e51b8352820152602760248201527f436f6e747261637420646f6573206e6f74206578697374206f6e2074686973206044820152666e6574776f726b60c81b6064820152fd5b82602036600319011262000261576001600160a01b036200096f816200095162000a8d565b16918261020051526001602052604061020051205416151562000bec565b803b156200026157604051809263148c0c7560e01b8252816102005180945af180156200023757620009a2576102005180f35b620009ad9062000b34565b8062000739565b3462000261576020366003190112620002615760206001600160a01b0380620009dc62000a8d565b16610200515260018252604061020051205416604051908152f35b50903462000a3e57602036600319011262000a3e57359080548210156200025e57602062000a258362000a42565b905460405160039290921b1c6001600160a01b03168152f35b5080fd5b90600091825481101562000a79578280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563019190565b634e487b7160e01b83526032600452602483fd5b600435906001600160a01b038216820362000aa457565b600080fd5b60005b83811062000abd5750506000910152565b818101518382015260200162000aac565b9060209162000ae98151809281855285808601910162000aa9565b601f01601f1916010190565b90815180825260208080930193019160005b82811062000b16575050505090565b83516001600160a01b03168552938101939281019260010162000b07565b67ffffffffffffffff811162000b4957604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111762000b4957604052565b67ffffffffffffffff811162000b4957601f01601f191660200190565b81601f8201121562000aa45780359062000bb98262000b82565b9262000bc9604051948562000b5f565b8284526020838301011162000aa457816000926020809301838601378301015290565b1562000bf457565b60405162461bcd60e51b815260206004820152601760248201527f436f6e747261637420646f6573206e6f742065786973740000000000000000006044820152606490fd5b81601f8201121562000aa457805162000c528162000b82565b9262000c62604051948562000b5f565b8184526020828401011162000aa45762000c83916020808501910162000aa9565b90565b51906001600160a01b038216820362000aa457565b67ffffffffffffffff811162000b495760051b60200190565b81601f8201121562000aa45780519162000cce8362000c9b565b9262000cde604051948562000b5f565b808452602092838086019260051b82010192831162000aa4578301905b82821062000d0a575050505090565b83809162000d188462000c86565b81520191019062000cfb56fe60c060405262001c9c803803806200001781620005cb565b92833981019061012081830312620005c6576200003481620005f1565b60208201519091906001600160401b038111620005c657836200005991830162000606565b90604081015193606082015160808301519160a08401519060018060401b038211620005c6576200008c91850162000606565b9560c084015194620000a761010060e08701519601620005f1565b50620151806000554260a05260808790528051906001600160401b038211620005b05760035490600182811c92168015620005a5575b60208310146200058f5781601f8493116200051a575b50602090601f83116001146200048b576000926200047f575b50508160011b916000199060031b1c1916176003555b8060075581156200046957819004600855600a55600b556004828155600592909255600060095583516001600160401b0381116200035157601254600181811c911680156200045e575b60208210146200044957601f8111620003df575b50602094601f8211600114620003725794819293949560009262000366575b50508160011b916000199060031b1c1916176012555b601355600c549168010000000000000000928381101562000351576001810180600c558110156200033c57600c6000527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b03929092166001600160a01b03199283168117909155600e548481101562000327576001810180600e558110156200031257600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018054909216179055600f5491821015620002fd576001820180600f55821015620002e857600f60005260017f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8028301556040516116239081620006798239608051818181610b200152610f80015260a0518181816103c20152610a9a0152f35b603290634e487b7160e01b6000525260246000fd5b604190634e487b7160e01b6000525260246000fd5b603284634e487b7160e01b6000525260246000fd5b604184634e487b7160e01b6000525260246000fd5b603283634e487b7160e01b6000525260246000fd5b604183634e487b7160e01b6000525260246000fd5b0151905038806200019f565b601f19821695601260005260206000209160005b888110620003c657508360019596979810620003ac575b505050811b01601255620001b5565b015160001960f88460031b161c191690553880806200039d565b9192602060018192868501518155019401920162000386565b60126000527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444601f830160051c810191602084106200043e575b601f0160051c01905b81811062000431575062000180565b6000815560010162000422565b909150819062000419565b602284634e487b7160e01b6000525260246000fd5b90607f16906200016c565b634e487b7160e01b600052601260045260246000fd5b0151905038806200010c565b6003600090815293507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b91905b601f1984168510620004fe576001945083601f19811610620004e4575b505050811b0160035562000122565b015160001960f88460031b161c19169055388080620004d5565b81810151835560209485019460019093019290910190620004b8565b60036000529091507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f840160051c8101916020851062000584575b90601f859493920160051c01905b818110620005745750620000f3565b6000815584935060010162000565565b909150819062000557565b634e487b7160e01b600052602260045260246000fd5b91607f1691620000dd565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620005b057604052565b51906001600160a01b0382168203620005c657565b919080601f84011215620005c65782516001600160401b038111620005b0576020906200063c601f8201601f19168301620005cb565b92818452828287010111620005c65760005b8181106200066457508260009394955001015290565b85810183015184820184015282016200064e56fe61016080604052600480361015610020575b5050361561001e57600080fd5b005b60003560e01c91826302d05d3f14610f6d57508163148c0c7514610d695781632a289e6714610d3c5781632fcc345b14610d20578163335e536c14610d0257816339518b5e14610ce557816339da315214610cc75781633f3b3b2714610ca9578163446ad54914610c8257816348d555eb14610c645781634a76d31214610c2f57816356dad8dc146108ba578163570f88131461088b5781635bec4cb41461086d5781635daf08ca1461082d578163655bce22146107f4578163a1657681146107d6578163a230c5241461079f578163a693600b14610781578163bab2f55214610763578163bf85ef321461069c578163c252259814610643578163c5a0a74d14610616578163c623674f146105e2578163ccbac9f5146105c4578163d49398ae146103e5578163d8270dce146103aa578163dbdff2c114610387578163eb33309614610209578163f8b2cb4f146101db57508063fcf488a9146101b25763ff186b2e1461018f573880610011565b346101ad5760003660031901126101ad576020600154604051908152f35b600080fd5b346101ad5760003660031901126101ad576010546040516001600160a01b039091168152602090f35b346101ad5760203660031901126101ad57356001600160a01b03811681036101ad5760209031604051908152f35b60203660031901126101ad5780356001600160a01b03811691908281036101ad57610233816112e3565b600a54809110156103545761024f61024a836112e3565b611213565b90546009549160031b1c81106103105710156102db5761024a610271916112e3565b819291549060031b9181831c90600182018092116102c65750821b91600019901b19161790557f2042b7712cb5296596d92ab14e92638ac307b3b6300fa48c5ccd37ad6adbbeb16020600854604051908152a2005b601190634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152602081840152600e60248201526d115c5d58881a185cc8195b99195960921b6044820152606490fd5b60405162461bcd60e51b8152602081860152601b60248201527f416c7265616479207061696420666f722074686973206379636c6500000000006044820152606490fd5b60405162461bcd60e51b8152602081850152600c60248201526b2737ba10309036b2b6b132b960a11b6044820152606490fd5b346101ad5760003660031901126101ad5760206103a261139b565b604051908152f35b346101ad5760003660031901126101ad5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b60203660031901126101ad5780356001600160a01b038116918282036101ad57600c5491600a548310156105915780316008541161055657678ac7230489e8000061042f826112e3565b0361051f57600160401b928381101561050a57816104568260016104759401600c5561124a565b90919082549060031b9160018060a01b03809116831b921b1916179055565b600e548381101561050a57906104568260016104949401600e556111c6565b600f54918210156104f557508060016104b09201600f55611213565b81549060031b906001821b91600019901b19161790557f7f3b9effe05cfb4f31f854004de03199fd03fe56bf38a48b2aa9a9f4402d6e236020600854604051908152a2005b604190634e487b7160e01b6000525260246000fd5b604183634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152602081840152601060248201526f20b63932b0b23c90309036b2b6b132b960811b6044820152606490fd5b60405162461bcd60e51b81526020818401526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b60405162461bcd60e51b8152602081840152600c60248201526b115c5d58881a5cc8199d5b1b60a21b6044820152606490fd5b346101ad5760003660031901126101ad576020601154604051908152f35b346101ad5760003660031901126101ad576106126105fe6110d2565b604051918291602083526020830190611186565b0390f35b346101ad5760203660031901126101ad57356001600160a01b03811681036101ad576103a26020916112e3565b346101ad5760203660031901126101ad5735600d548110156101ad57600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501546040516001600160a01b039091168152602090f35b346101ad5760003660031901126101ad57600254604051633fabe5a360e21b8152919060a0908390839082906001600160a01b03165afa91821561075757600092610709575b506402540be400918281029281840514901517156102c65760208280600155604051908152f35b90915060a0813d821161074f575b8161072460a09383610faf565b810103126101ad57610735816115d6565b506107476080602083015192016115d6565b5090826106e2565b3d9150610717565b6040513d6000823e3d90fd5b346101ad5760003660031901126101ad576020600954604051908152f35b346101ad5760003660031901126101ad576020600754604051908152f35b346101ad5760203660031901126101ad57356001600160a01b03811681036101ad576107cc602091611585565b6040519015158152f35b346101ad5760003660031901126101ad576020600a54604051908152f35b346101ad5760003660031901126101ad57602090546103a26108256009549261081f600b5485611346565b90611339565b421015611359565b346101ad5760203660031901126101ad5735600c548110156101ad5761085460209161124a565b905460405160039290921b1c6001600160a01b03168152f35b346101ad5760003660031901126101ad576020600b54604051908152f35b346101ad5760003660031901126101ad57602060405173694aa1769357215de4fac081bf1f309adc3253068152f35b346101ad5760003660031901126101ad57546005546101205260065460075460085490600954600a54600b5495600c5496601354610100526108fa610fe7565b976109036110d2565b9160405194856020600e54918281520190600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd9060005b818110610c105750505086610954910387610faf565b6040519660208885815201600c6000527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c760005b868110610bf15750508861099d910389610faf565b60405180610140526020600d54918281520190600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb59060005b818110610bd2575050506109f5906101405180910390610faf565b60206040518060c052600f548060a052815201998a60e052600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8029960009b5b60a0518d1015610a58576001602081928e548152019c019c019b9a610a38565b610b16999a9c50610b599b509c610a97610b809f610b6b9f610a809060c05180910390610faf565b604051806080526102408091526080510190611186565b987f00000000000000000000000000000000000000000000000000000000000000006020608051015260406080510152610120516060608051015260808051015260a0608051015260c0608051015260e06080510152610100608051015261012060805101526101406080510152608051610160818403910152611186565b9060018060a01b037f00000000000000000000000000000000000000000000000000000000000000001661018060805101526080516101a0818403910152611281565b906080516101c0818403910152611281565b6080516101e081830391015261014051611281565b608051610200818303910152602060c0515191828152019060e0519060005b818110610bbc578361010051610220608051015260805180910390f35b8251845260209384019390920191600101610b9f565b82546001600160a01b03168452602090930192600192830192016109da565b81546001600160a01b0316835260209092019160019182019101610988565b82546001600160a01b031684526020909301926001928301920161093e565b346101ad5760203660031901126101ad5735600f548110156101ad57610c56602091611213565b90546040519160031b1c8152f35b346101ad5760003660031901126101ad576020600854604051908152f35b346101ad5760203660031901126101ad5735600e548110156101ad576108546020916111c6565b346101ad5760003660031901126101ad576020600654604051908152f35b346101ad5760003660031901126101ad576020601354604051908152f35b346101ad5760003660031901126101ad5760209054604051908152f35b346101ad5760003660031901126101ad576020600554604051908152f35b346101ad5760003660031901126101ad576106126105fe610fe7565b346101ad5760003660031901126101ad576020610d57611461565b6040516001600160a01b039091168152f35b346101ad5760003660031901126101ad57610d9d610825825461081f610d94600954600b5490611346565b60005490611346565b4790610dae600854600c5490611346565b808311610f65575b50610dbf611461565b91600d54600160401b81101561050a576001810180600d55811015610f5057600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5019260018060a01b0316926bffffffffffffffffffffffff60a01b9084828254161790556010541660105560008080808487617530f13d15610f4b573d67ffffffffffffffff8111610f365760405190610e68601f8201601f191660200183610faf565b8152600060203d92013e5b15610efb577f9206244e7d07ef9a49c1dae86e820d494f0dd268fa04f434eb1de8475a4bb55460208492604051908152a2610ec7610eb26009546112be565b91826009555461081f610d94600b5485611346565b600555600a5414610ed457005b7fd29e8545d33d16738453f73ba7267664418170c341c7ab7e3eb60e1fa27dd18e600080a2005b60405162461bcd60e51b815260208184015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606490fd5b604184634e487b7160e01b6000525260246000fd5b610e73565b603283634e487b7160e01b6000525260246000fd5b915082610db6565b346101ad5760003660031901126101ad577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff821117610fd157604052565b634e487b7160e01b600052604160045260246000fd5b60405190600060035490600182811c908084169384156110c8575b60209485841081146110b457838852879493929181156110945750600114611035575b505061103392500383610faf565b565b9093915060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b936000915b81831061107c57505061103393508201013880611025565b85548884018501529485019487945091830191611064565b91505061103394925060ff191682840152151560051b8201013880611025565b634e487b7160e01b85526022600452602485fd5b91607f1691611002565b60405190600060125490600182811c9080841693841561117c575b60209485841081146110b45783885287949392918115611094575060011461111d57505061103392500383610faf565b9093915060126000527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444936000915b81831061116457505061103393508201013880611025565b8554888401850152948501948794509183019161114c565b91607f16916110ed565b919082519283825260005b8481106111b2575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611191565b600e548110156111fd57600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0190600090565b634e487b7160e01b600052603260045260246000fd5b600f548110156111fd57600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020190600090565b600c548110156111fd57600c6000527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70190600090565b90815180825260208080930193019160005b8281106112a1575050505090565b83516001600160a01b031685529381019392810192600101611293565b60001981146112cd5760010190565b634e487b7160e01b600052601160045260246000fd5b600c549060005b82811061130057505050678ac7230489e8000090565b6113098161124a565b905460039190911b1c6001600160a01b03908116908316146113335761132e906112be565b6112ea565b91505090565b919082018092116112cd57565b818102929181159184041417156112cd57565b1561136057565b60405162461bcd60e51b815260206004820152601360248201527210de58db19481b9bdd08195b991959081e595d606a1b6044820152606490fd5b6004546009546113c26108256113b3600b5484611346565b9361081f600095865490611346565b60001943019043821161144d575a6040519160208301934084524260408401523360601b6060840152607483015260948201526094815260c0810181811067ffffffffffffffff82111761143957604052519020600e5491821561142557500690565b634e487b7160e01b81526012600452602490fd5b634e487b7160e01b84526041600452602484fd5b634e487b7160e01b83526011600452602483fd5b600454611488610825611479600954600b5490611346565b9261081f600094855490611346565b61149061139b565b611499816111c6565b919060018060a01b03928391549060031b1c166bffffffffffffffffffffffff60a01b601054161760105542600655600e546001811161153f575b5050600e54801561152b577f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df92919060001901611510816111c6565b8382549160031b1b19169055600e556010541691818392a290565b634e487b7160e01b83526031600452602483fd5b600019810190811161157157906104568361155c61156a946111c6565b90549060031b1c16916111c6565b38806114d4565b634e487b7160e01b84526011600452602484fd5b600c549060005b82811061159b57505050600090565b6115a48161124a565b905460039190911b1c6001600160a01b03908116908316146115ce576115c9906112be565b61158c565b505050600190565b519069ffffffffffffffffffff821682036101ad5756fea2646970667358221220b9dc626d92c3968899c1aba634095b5d5ae4bd671e54b97e0f46631449955d8d64736f6c63430008140033a2646970667358221220fba226bc3c1dc47df321f81ba5d990a77d0b380fa4a79502e9506eb3f45ff34c64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 757,
        "contract": "contracts/EthqubFactory.sol:EthqubFactory",
        "label": "ethqubArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(Ethqub)749)dyn_storage"
      },
      {
        "astId": 762,
        "contract": "contracts/EthqubFactory.sol:EthqubFactory",
        "label": "ethqubMapping",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(Ethqub)749)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Ethqub)749)dyn_storage": {
        "base": "t_contract(Ethqub)749",
        "encoding": "dynamic_array",
        "label": "contract Ethqub[]",
        "numberOfBytes": "32"
      },
      "t_contract(Ethqub)749": {
        "encoding": "inplace",
        "label": "contract Ethqub",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(Ethqub)749)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract Ethqub)",
        "numberOfBytes": "32",
        "value": "t_contract(Ethqub)749"
      }
    }
  }
}